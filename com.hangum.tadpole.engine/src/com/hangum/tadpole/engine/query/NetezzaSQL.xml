<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      nilriri - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<!-- 
	IBM Netezza 7.2.1.0 Build 46322 버전으로 초기 작업을 시작했습니다.
	
	@author nilriri	
 -->
<sqlMap namespace="NetezzaSQL_query">

<!--
	database connection test 
 -->
<select id="connectionCheck" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT version()
</select>

<!-- 
	database schema
	
	
 -->
<select id="getSchemas" resultClass="java.util.HashMap">
SELECT
	3 as "nstype",
	schema as "schema",
	schemaid as "oid",
	owner as "namespaceowner",
	'' as "nspacl",
	'' as "description",
	'' as "cancreate"
FROM
	_v_schema
ORDER BY
	schema
</select>

 <select id="tableListOnlyName" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.lang.String">
SELECT
	table_schema||'.' || table_name as "name"
FROM
	tables
WHERE
	table_type IN ('TABLE', 'EXTERNAL TABLE', 'BASE TABLE SET',  'TABLE VERSION', 'MANAGEMENT TABLE',  'SYSTEM TABLE' )
	AND table_schema = #schema_name#
ORDER BY
	table_name
</select>
<select id="tableList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.lang.String">
SELECT
	schema as "schema_name" 
	,objname as "realname" 
	,objname as "name"  
	,description as "comment"
	,objtype as "table_type"
FROM
	_v_object_data
WHERE 1=1
	AND objtype IN ('TABLE', 'EXTERNAL TABLE', 'BASE TABLE SET',  'TABLE VERSION', 'MANAGEMENT TABLE',  'SYSTEM TABLE' )
	AND schema = #schema_name#
ORDER BY
	objname
</select>

<select id="table" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.util.HashMap">
SELECT
	schema as "schema_name" 
	,objname as "name" , 
	description as "comment"
FROM
	_v_object_data
WHERE
	objtype IN ('TABLE', 'EXTERNAL TABLE')
	AND objname = #name#
ORDER BY
	objname
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)

	PostgreSQL System function
	col_description(table_oid, column_number)	text	get comment for a table column
	obj_description(object_oid, catalog_name)	text	get comment for a database object
	
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
SELECT
	column_name as "FIELD"
	, type_name "TYPE"
	, is_nullable as "NULL"
	, coldefault as "Default" 
	, n.constype as "key"
	, description as "comment"
	, n.conseq
FROM _v_sys_columns c 
	INNER JOIN _v_relation_column r	ON r.name =c.table_name	AND c.column_name =r.attname
	LEFT JOIN (
		SELECT
			t.objid as tableid , v.objid as consid , t.type as constype , x.conseq as 
			conseq , x.conattrnum as attnum
		FROM _v_sys_constraint v
			INNER JOIN _v_table_constraint t ON t.constraintname = v.objname
			INNER JOIN _t_const_relattr x ON v.objid = x.conid ) n ON n.tableid = c.objid AND n.attnum = r.attnum
WHERE 1=1
	AND table_name = #table#
ORDER BY ordinal_position
</select>

<!-- 
	테이블간의 관계 목록 정보를 얻습니다.
	erd 그릴때 관계 목록을 보여주기 위한 목적입니다.
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.engine.query.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
SELECT
	f.CONSTRAINTNAME as constraint_name 
	, f.RELATION as table_name 
	, f.ATTNAME as column_name 
	, f.PKRELATION as referenced_table_name 
	, f.PKATTNAME as referenced_column_name
FROM
	_V_RELATION_KEYDATA f
WHERE
	f.RELATION IN ($tables$)
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.engine.query.dao.mysql.ReferencedTableDAO" >
SELECT
	f.CONSTRAINTNAME as constraint_name 
	, f.RELATION as table_name 
	, f.ATTNAME as column_name 
	, f.PKRELATION as referenced_table_name 
	, f.PKATTNAME as referenced_column_name
FROM
	_V_RELATION_KEYDATA f
WHERE
	f.RELATION IN ($tables$)
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.lang.String">
SELECT
	v.table_name , v.table_schema as schema_name
FROM
	VIEWS v
WHERE 1=1
	/*and table_schema NOT IN ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA')*/
	AND table_schema = #schema_name#
ORDER BY
	table_name
</select>
	
<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
SELECT
	  t.schema as "schema_name"
	, t.tablename as "table_name"
	, v.sysindexname as "index_name"
FROM _V_SYS_INDEX v
	inner join _V_TABLE t on v.tablename = t.tablename
WHERE 1=1
	/* and t.schema not in ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA') */
    and lower(t.tablename) = lower(#table_name#) 
</select>
<!-- 
	index의 디테일 정보
	
	and t.relkind = 'r'
	and ix.indisunique = 'true'
	and ix.indisprimary = 'false'
	
 -->
 <select id="indexDetailList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
	select
	'' as table_name,
	'' as index_name,
	'' as column_name,
	0 as seq_in_index,
	0 as column_length,
	0 as char_length,
	'' as "comment",
	'' as uniqueness,
	'' as table_owner,
	'' as table_schema,
	'' as indisprimary,
	'' as indoption
	from _v_dual
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
	
	prorettype = 2278 : procedure return type void
	prorettype = 2279 : procedure return type trigger
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
select 
	p.schema as "schema_name"
	, p.procedure as "name"
	, p.objtype as type
	, '' as definer
	, (case when numargs > 0 then arguments else 'none' end) || ', ' || returns as comment
from _v_procedure p
where 1=1
  /*and p.schema not in ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA')*/
  and p.schema = #schema_name#
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
select 
	p.schema as "schema_name"
	, p.procedure as "name"
	, p.objtype as type
	, '' as definer
	, (case when numargs > 0 then arguments else 'none' end) || ', ' || returns as comment
from _v_procedure p
where 1=1
  /*and p.schema not in ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA')*/
  and p.schema = #schema_name#
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerAllList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
select 
	 CURRENT_CATALOG as database
	 , t.trigger as trigger
	 , '' as event
	 , t.owner as definer
	 , '' as table_name
	 , '' as action_condition
	 , '' as statement
	 , '' as timing
	 , t.createdate as created
	 , '' as status
from _V_TRIGGER t
</select>

<select id="triggerList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TriggerDAO" parameterClass="java.util.Map">
select 
	 CURRENT_CATALOG as database
	 , t.trigger as trigger
	 , '' as event
	 , t.owner as definer
	 , '' as table_name
	 , '' as action_condition
	 , '' as statement
	 , '' as timing
	 , t.createdate as created
	 , '' as status
from _V_TRIGGER t
</select>

<!-- 
	enable 상태의 트리거 목록을 리턴한다.
 -->
<select id="triggerListInTable" resultClass="java.util.HashMap" parameterClass="java.lang.String">
select 
	  '' as "table_name"
	, t.trigger as "trigger_name"
    , '' as "disable_statement"
    , '' as "enable_statement"
from _V_TRIGGER t

</select>

<!-- 
	table명을 받아서 pk 컬럼 목록을 리턴한다.
 -->
<select id="primarykeyListInTable" resultClass="java.util.HashMap" parameterClass="java.lang.String">
SELECT
	 c.column_name as "column_name" 
	, n.attnum as "column_order"
FROM _v_sys_columns c 
	INNER JOIN _v_relation_column r	ON r.name =c.table_name	AND c.column_name =r.attname
	inner JOIN (
		SELECT
			t.objid as tableid , v.objid as consid , t.type as constype , x.conseq as 
			conseq , x.conattrnum as attnum
		FROM _v_sys_constraint v
			INNER JOIN _v_table_constraint t ON t.constraintname = v.objname
			INNER JOIN _t_const_relattr x ON v.objid = x.conid ) n ON n.tableid = c.objid AND n.attnum = r.attnum
WHERE 1=1
	AND lower(table_name) = lower(#table_name#)
ORDER BY n.attnum
</select>

<!-- 
	table row count
 -->
<select id="tableRowCount" resultClass="java.lang.Integer" parameterClass="java.lang.String">
	SELECT count(*) FROM $table$ 
</select>

<!-- 
	table information
 -->
<select id="tableInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
select 
	  t.tablename as "name"
	, t.relhasindex as "has_index"	 
	, '' as "is_shared"
	, t.RELHASPKEY as "has_pk"
	, '' as "has_subclass"
	, t.DESCRIPTION as "comment"
from _v_table t
where t.objtype in ('TABLE', 'EXTERNAL TABLE')
order by t.tablename
</select>

<!-- 
	column information
 -->
<select id="columnInformation" resultClass="com.hangum.tadpole.engine.query.dao.rdb.RDBInfomationforColumnDAO" parameterClass="java.lang.String">
SELECT
	c.table_name as table_name
	, t.description as table_comment
	, c.column_name as column_name 
	, c.type_name as data_type
	, c.is_nullable as nullable
	, r.coldefault as data_default 
	, r.description as column_comment
	, n.constype as key
	, n.conseq as conseq
FROM _v_table t
	inner join _v_sys_columns c on t.objid = c.objid
	INNER JOIN _v_relation_column r	ON r.name =c.table_name	AND c.column_name =r.attname
	LEFT JOIN (
		SELECT
			t.objid as tableid , v.objid as consid , t.type as constype , x.conseq as 
			conseq , x.conattrnum as attnum
		FROM _v_sys_constraint v
			INNER JOIN _v_table_constraint t ON t.constraintname = v.objname
			INNER JOIN _t_const_relattr x ON v.objid = x.conid ) n ON n.tableid = c.objid AND n.attnum = r.attnum
WHERE 1=1
 and t.objtype in ('TABLE', 'EXTERNAL TABLE', 'BASE TABLE SET',  'TABLE VERSION', 'MANAGEMENT TABLE',  'SYSTEM TABLE')
ORDER BY t.objid, c.ordinal_position
</select>

<!-- 
	Table DDL Script
 -->
<select id="getTableScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
SELECT
	  t.OWNER as "owner"
	, t.tablename as "table_name"
	, t.description as "table_comment"
	, c.column_name as "column_name" 
	, r.description as "column_comment"
	, c.type_name as "data_type"
	, '' as "data_type_mod"
	, '' as "data_type_owner"
	, c.ordinal_position as "attnum"
	, '' as "max_attnum"
	, '' as "char_used"
	, cast(c.decimal_digits as integer) as "data_precision"
	, cast(c.column_size as integer) as "data_scale"
	, cast(c.column_size as integer) as "data_length"
	, r.coldefault as "data_default" 
	, n.constype as "key"
	, n.conseq as "conseq"
FROM _v_table t
	inner join _v_sys_columns c on t.objid = c.objid
	INNER JOIN _v_relation_column r	ON r.name =c.table_name	AND c.column_name =r.attname
	LEFT JOIN (
		SELECT
			t.objid as tableid , v.objid as consid , t.type as constype , x.conseq as 
			conseq , x.conattrnum as attnum
		FROM _v_sys_constraint v
			INNER JOIN _v_table_constraint t ON t.constraintname = v.objname
			INNER JOIN _t_const_relattr x ON v.objid = x.conid ) n ON n.tableid = c.objid AND n.attnum = r.attnum
WHERE 1=1
 and t.objtype in ('TABLE', 'EXTERNAL TABLE', 'BASE TABLE SET',  'TABLE VERSION', 'MANAGEMENT TABLE',  'SYSTEM TABLE')
 and t.tablename = #table_name#
ORDER BY t.objid, c.ordinal_position
</select>

<!-- 
	Table DDL Script => Primary key list
 -->
<select id="getTableScript.pk" resultClass="java.util.HashMap" parameterClass="java.lang.String">
SELECT
	  n.constraint_name as "constraint_name"
	, c.column_name as "column_name" 
	, n.conseq as "conseq"
FROM _v_sys_columns c 
	INNER JOIN _v_relation_column r	ON r.name =c.table_name	AND c.column_name =r.attname
	INNER JOIN (
		SELECT
			t.objid as tableid , v.objid as consid , t.type as constype , x.conseq as 
			conseq , x.conattrnum as attnum , v.objname as constraint_name
		FROM _v_sys_constraint v
			INNER JOIN _v_table_constraint t ON t.constraintname = v.objname
			INNER JOIN _t_const_relattr x ON v.objid = x.conid ) n ON n.tableid = c.objid AND n.attnum = r.attnum
WHERE 1=1
	AND c.table_name = #table#
ORDER BY n.conseq
</select>

<!-- 
	Table DDL Script => Table, Column Comment Script
 -->
 
<select id="getTableScript.comments" resultClass="java.lang.String" parameterClass="java.util.HashMap">
select 
	'comment on table ' || r.tablename || ' is ''' || r.description || '''' as "comment_text"
	, 0 as "orderseq"
from _v_table r
where r.schema = #schema#
  and r.tablename = #object_name#
union all
select 
	'comment on column ' || r.name || '.' || r.attname || ' is ''' || r.description || '''' as comment_text
	, r.attnum
from _v_relation_column r
where r.schema = #schema#
 and r.type in ('TABLE', 'EXTERNAL TABLE', 'BASE TABLE SET',  'TABLE VERSION', 'MANAGEMENT TABLE',  'SYSTEM TABLE') 
 and r.name = #object_name#
order by orderseq
</select>

<!-- 
	Table DDL Script => All Trigger in table.
 -->
<select id="getTableScript.trigger" resultClass="java.lang.String" parameterClass="java.lang.String">
select 
    '/*Not support trigger.*/' as source_text
from _v_dual
</select>

<!-- 
	Function Script 
	
	pg_get_functiondef(func_oid) : get definition of a function
 -->
 
<select id="getFunctionScript" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
 SELECT   
 	'Not support generate ddl.' as "procedure_name"
 	, '' as "parameter_types"
 	, '' as "return_types"
 	, '' as "source_text"
 	, '' as "arg_names"
 FROM _v_dual
</select>

<!-- 
	Procedure Script 
 -->
 
<select id="getProcedureScript" resultClass="java.util.HashMap" parameterClass="java.util.HashMap">
select
	p.procedure as "procedure_name"
	, p.arguments as "parameter_types"
	, p.result as "return_types"
	, p.proceduresource as "source_text"
	, '' as "arg_names"  
from _v_procedure p
 WHERE schema = #schema#   
 and procedure = #object_name#
</select>
 
<!-- 

 -->        
<select id="getProcedureInParamter"  resultClass="com.hangum.tadpole.engine.query.dao.rdb.InOutParameterDAO" parameterClass="java.util.HashMap">
select
	p.procedure as "name"
	, p.arguments as "arguments"
	, p.arguments as "rdbtype"
	, p.result as "return_type"
	, p.proceduresource as "source"
from _v_procedure p
 WHERE schema = #schema#   
 and procedure = #object_name#
</select>

<select id="getProcedureScript.type" resultClass="java.lang.String" parameterClass="java.lang.Object">
select typname as "type_name"
from pg_catalog.pg_type
where oid = #oid#;
</select>

<!-- 
	Trigger Script 
	pg_get_triggerdef(trigger_oid)	:	get CREATE [ CONSTRAINT ] TRIGGER command for trigger
 --> 
<select id="getTriggerScript" resultClass="java.lang.String" parameterClass="java.lang.String">
select
 '/*Not support trigger.*/' as "source_text"
from _v_dual
</select>

<!-- 
	Index Script 
 -->
<select id="getIndexScript" resultClass="java.lang.String" parameterClass="java.lang.String">
select
 '/*Not support index.*/' as "indexdef"
from _v_dual
</select>

<!-- 
	View Script 
 -->
<select id="getViewScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">
select
	'CREATE OR REPLACE VIEW ' || v.database||'.'||v.schema||'.'||v.viewname || ' AS ' AS SOURCE_TEXT
from _v_view v
where 1=1 
  /*and v.schema not in ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA')*/
  and v.viewname = #view_name#
</select> 
 
<select id="getViewScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">
select
	v.definition as definition 
from _v_view v
where 1=1 
  /*and v.schema not in ('DEFINITION_SCHEMA', 'INFORMATION_SCHEMA')*/
  and v.viewname = #view_name#
</select>

<!-- 
	SESSION LIST
 -->
<select id="sessionList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.SessionListDAO">
select 
	  s.PID as id
	, s.SESSION_USERNAME as pg_user
	, s.dbname as db
	, s.CLIENT_IP as host
	, s.SESSION_STATE_NAME as state
	, s.CONNECT_TIME as pg_time
	, s.SQLTEXT as info	
from _V_SESSION_DETAIL_TX s	
</select>

</sqlMap>
